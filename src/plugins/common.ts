/* eslint-disable sonarjs/no-nested-template-literals */
import { dye, DyeColors, DyeGrayscale, DyeModifier } from '@prostojs/dye'
import { writeFileSync } from 'fs'

export function createDyeReplacements(noOutput = false): Record<string, string> {
  const c = dye('red')
  const bg = dye('bg-red')
  const dyeReplacements = {
    __DYE_RESET__: JSON.stringify(dye.reset),
    __DYE_COLOR_OFF__: JSON.stringify(c.close),
    __DYE_BG_OFF__: JSON.stringify(bg.close),
  } as Record<string, string>
  DyeModifier.forEach(v => {
    dyeReplacements[`__DYE_${v.toUpperCase()}__`] = `'${dye(v).open}'`
    dyeReplacements[`__DYE_${v.toUpperCase()}_OFF__`] = `'${dye(v).close}'`
  })
  DyeColors.forEach(v => {
    dyeReplacements[`__DYE_${v.toUpperCase()}__`] = `'${dye(v).open}'`
    dyeReplacements[`__DYE_BG_${v.toUpperCase()}__`] = `'${dye(`bg-${v}`).open}'`
    dyeReplacements[`__DYE_${v.toUpperCase()}_BRIGHT__`] = `'${dye(`${v}-bright`).open}'`
    dyeReplacements[`__DYE_BG_${v.toUpperCase()}_BRIGHT__`] = `'${dye(`bg-${v}-bright`).open}'`
  })
  DyeGrayscale.forEach(v => {
    dyeReplacements[`__DYE_${v.toUpperCase()}__`] = `'${dye(v).open}'`
    dyeReplacements[`__DYE_BG_${v.toUpperCase()}__`] = `'${dye(`bg-${v}`).open}'`
  })
  if (!noOutput) {
    writeDts(Object.keys(dyeReplacements))
  }
  return dyeReplacements
}

function writeDts(keys: string[]) {
  const lines = [
    `/**
 * This file is auto-generated by the Dye plugin.
 * It defines global color and modifier variables that can be used in the codebase.
 * These variables will be replaced during the build process.
 */`,
    '/* eslint-disable unicorn/no-abusive-eslint-disable */',
    '/* eslint-disable */',
    '',
    ...keys.map(key => `declare var ${key}: string`),
    '',
  ]

  const dtsContents = lines.join('\n')
  writeFileSync('./dye.d.ts', dtsContents)
}
